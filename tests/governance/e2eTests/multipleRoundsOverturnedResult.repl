(load "../governance-setup.repl")

;  *******************************************************************
  (print "***************************************************************************************")
  (print "Test multiple vote rounds on a dispute, overturn result")
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex) (use h)
  (deposit-stake
    "reporter-1"
    (describe-keyset "free.reporter-1")
    (precision 10))

  (submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter-1")
  (commit-tx)
  ; round 1
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex) (use h)
  (begin-dispute
    "reporter2-keyset"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (blockTime))
  (commit-tx)
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex) (use h)
  (vote 1 true false "reporter-1")
  (vote 1 true false "reporter2-keyset")
  ; advance time
  (env-chain-data {'block-time: (advanceTime (* 86400 2))})
  (tally-votes 1)
  ; round 2
  (begin-dispute
    "reporter2-keyset"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (- (blockTime) (* 86400 2)))
  (vote 2 true false "reporter-1")
  (vote 2 true false "reporter2-keyset")
  ; advance time
  (env-chain-data {'block-time: (advanceTime (* 86400 4))})
  (tally-votes 2)
  ; round 3
  (begin-dispute
    "reporter2-keyset"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (- (blockTime) (* 86400 6)))
  (vote 3 false false "reporter-1")
  (vote 3 false false "reporter2-keyset")
  ; advance time
  (env-chain-data {'block-time: (advanceTime (* 86400 6))})
  (tally-votes 3)
  ; execute
  (env-chain-data {'block-time: (advanceTime (* 86400 3))})
  (let ((voter1-bal (f-TRB.get-balance "reporter-1"))
        (voter2-bal (f-TRB.get-balance "reporter2-keyset"))
        (balance-gov (f-TRB.get-balance GOV_ACCOUNT)))

    (expect-failure "Must be the final vote" (execute-vote 1))
    (expect-failure "Must be the final vote" (execute-vote 2))
    (execute-vote 3)
    (expect-failure "Vote has already been executed" (execute-vote 3))
    (expect "" (+ 17.0 voter1-bal) (f-TRB.get-balance "reporter-1"))
    (expect "" voter2-bal (f-TRB.get-balance "reporter2-keyset"))
    (expect "" (- balance-gov 17.0) (f-TRB.get-balance GOV_ACCOUNT))
    (expect "Vote failed" "FAILED" (at 'result (get-vote-info 3))))
