(load "../governance-setup.repl")
(namespace (read-msg "ns"))
(use f-TRB) (use governance) (use tellorflex)
(env-data {
  "ns": "free",
  "admin-keyset": { "keys": [ "admin-public-key" ], "pred": "keys-all"},
  "account1": { "keys": []},
  "account3": { "keys": [] },
  "account4": { "keys": [] },
  "account2": { "keys": [] } })
(env-sigs [
  {"key": "account1", "caps": [(TRANSFER "account1" "account2" 100.0), (TRANSFER "account1" FLEX_ACCOUNT 10.0)]},
  {"key": "account2", "caps": [(TRANSFER "account2" GOV_ACCOUNT 10.0)]},
  {"key": "account3", "caps": [(TRANSFER "account3" GOV_ACCOUNT 10.0)]},
  {"key": "account4", "caps": [(TRANSFER "account4" GOV_ACCOUNT 10.0)]},
  {"key": "admin-public-key", "caps": []}])
  (begin-tx)
  (namespace (read-msg "ns"))
  (use f-TRB)
  ;  define keysets in namespace
  (define-keyset (+ (read-msg "ns") ".account1") (read-keyset "account1"))
  (define-keyset (+ (read-msg "ns") ".account2") (read-keyset "account2"))
  (define-keyset (+ (read-msg "ns") ".account3") (read-keyset "account3"))
  (define-keyset (+ (read-msg "ns") ".account4") (read-keyset "account4"))
  ;  create accounts in f-trb module
  (create-account "account1" (describe-keyset (+ (read-msg "ns") ".account1")))
  (create-account "account2" (describe-keyset (+ (read-msg "ns") ".account2")))
  (create-account "account3" (describe-keyset (+ (read-msg "ns") ".account3")))
  (create-account "account4" (describe-keyset (+ (read-msg "ns") ".account4")))
  ;  mint tokens (with admin cap)
  (mint "account1" (describe-keyset (+ (read-msg "ns") ".account1")) 1000.0)
  (mint "account3" (describe-keyset (+ (read-msg "ns") ".account3")) 10.0)
  (mint "account4" (describe-keyset (+ (read-msg "ns") ".account4")) 10.0)
  (commit-tx)
;  *******************************************************************
  (print "***************************************************************************************")
  (print "Test multiple vote rounds on a dispute, all passing")
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex) (use f-TRB)
  (transfer "account1" "account2" 100.0)
  (deposit-stake
    "account1"
    (describe-keyset "free.account1")
    (h.precision 10))

  (submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "account1")

  ; round 1
  (begin-dispute
    "account2"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (h.blockTime))
  (commit-tx)
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex) (use f-TRB)
  (vote 1 true false "account1")
  (vote 1 true false "account2")
  ; advance time
  (env-chain-data {'block-time: (h.advanceTime (* 86400 2))})
  (tally-votes 1)

  (begin-dispute
    "account3"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (- (h.blockTime) (* 86400 2)))
  (vote 2 true false "account1")
  (vote 2 true false "account2")
  ; advance time
  (env-chain-data {'block-time: (h.advanceTime (* 86400 4))})
  (tally-votes 2)
  ; round 3
  (begin-dispute
    "account4"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (- (h.blockTime) (* 86400 6)))
  (vote 3 true false "account1")
  (vote 3 true false "account2")
  ; advance time
  (env-chain-data {'block-time: (h.advanceTime (* 86400 6))})
  (tally-votes 3)
  ; execute
  (env-chain-data {'block-time: (free.h.advanceTime (* 86400 3))})
  (let ((reporter-bal (get-balance "account1"))
        (disputer1-bal (get-balance "account2"))
        (disputer2-bal (get-balance "account3"))
        (disputer3-bal (get-balance "account4"))
        (balance-gov (get-balance GOV_ACCOUNT)))

    (expect-failure "Must be the final vote" (execute-vote 1))
    (expect-failure "Must be the final vote" (execute-vote 2))
    (execute-vote 3)
    (expect-failure "Vote has already been executed" (execute-vote 3))
    (expect "" reporter-bal (get-balance "account1"))
    (expect "" (+ 11.0 disputer1-bal) (get-balance "account2"))
    (expect "" (+ 2.0 disputer2-bal) (get-balance "account3"))
    (expect "" (+ 2.0 disputer2-bal) (get-balance "account4"))
    (expect "" (- balance-gov 17.0) (get-balance GOV_ACCOUNT))
    (expect "passed" "PASSED" (at 'result (get-vote-info 3))))
  (commit-tx)