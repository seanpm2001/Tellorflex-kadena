(load "../governance-setup.repl")
(namespace (read-msg "ns"))
(use f-TRB) (use governance) (use tellorflex)
(env-data {
  "ns": "free",
  "admin-keyset": { "keys": [ "admin-public-key" ]},
  "account0": { "keys": []}, "account1": { "keys": []},
  "account2": { "keys": []}, "account3": { "keys": []}, 
  "account4": { "keys": []}, "account10": { "keys": []} })
(env-sigs [
  {"key": "account10", "caps": [(TRANSFER "account10" FLEX_ACCOUNT 40.0)]},
  {"key": "account0", "caps": [(TRANSFER "account0" GOV_ACCOUNT 10.0)]},
  {"key": "account1", "caps": [(TRANSFER "account1" GOV_ACCOUNT 1.0)]},
  {"key": "account2", "caps": [(TRANSFER "account2" GOV_ACCOUNT 2.0)]},
  {"key": "account3", "caps": [(TRANSFER "account3" GOV_ACCOUNT 3.0)]},
  {"key": "account4", "caps": [(TRANSFER "account4" GOV_ACCOUNT 1.0)]},
  {"key": "admin-public-key", "caps": []}])
(begin-tx)
(namespace (read-msg "ns"))
(use f-TRB [ create-account mint ])
(define-keyset (+ (read-msg "ns") ".account10") (read-keyset "account10"))
(define-keyset (+ (read-msg "ns") ".account0") (read-keyset "account0"))
(define-keyset (+ (read-msg "ns") ".account1") (read-keyset "account1"))
(define-keyset (+ (read-msg "ns") ".account2") (read-keyset "account2"))
(define-keyset (+ (read-msg "ns") ".account3") (read-keyset "account3"))
(define-keyset (+ (read-msg "ns") ".account4") (read-keyset "account4"))

(create-account "account10" (describe-keyset (+ (read-msg "ns") ".account10")))
(create-account "account0" (describe-keyset (+ (read-msg "ns") ".account0")))
(create-account "account1" (describe-keyset (+ (read-msg "ns") ".account1")))
(create-account "account2" (describe-keyset (+ (read-msg "ns") ".account2")))
(create-account "account3" (describe-keyset (+ (read-msg "ns") ".account3")))
(create-account "account4" (describe-keyset (+ (read-msg "ns") ".account4")))

(mint "account10" (describe-keyset (+ (read-msg "ns") ".account10")) 40.0)
(mint "account0" (describe-keyset (+ (read-msg "ns") ".account0")) 100.0)
(mint "account1" (describe-keyset (+ (read-msg "ns") ".account1")) 1.0)
(mint "account2" (describe-keyset (+ (read-msg "ns") ".account2")) 2.0)
(mint "account3" (describe-keyset (+ (read-msg "ns") ".account3")) 3.0)
(mint "account4" (describe-keyset (+ (read-msg "ns") ".account4")) 1.0)
(commit-tx)
;  *******************************************************************
  (print "***************************************************************************************")
  (print "Test vote weight outcomes")
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex)
  (deposit-stake "account10"
    (describe-keyset "free.account10")
    (h.precision 40))
  (submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (free.h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "account10")

  (begin-dispute "account0"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (h.blockTime))

  (vote 1 true false "account3")
  (vote 1 false false "account4")
  (vote 1 false true "account1")
  (commit-tx)
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex)
  (env-chain-data {'block-time: (h.advanceTime (* 86400 2))})
  (tally-votes 1)
  (expect "should be support" "PASSED" (at 'result (get-vote-info 1)))

  (submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "account10")
  (begin-dispute
    "account0"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (h.blockTime))

  (vote 2 true false "account4")
  (vote 2 false false "account3")
  (vote 2 false true "account1")
  (commit-tx)
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex)
  (env-chain-data {'block-time: (h.advanceTime (* 86400 2))})
  (tally-votes 2)
  (expect "should be failed" "FAILED" (at 'result (get-vote-info 2)))
  (submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "account10")
  (begin-dispute "account0"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (h.blockTime))

  (vote 3 true false "account2")
  (vote 3 false false "account4")
  (vote 3 false true "account1")
  (commit-tx)
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex)
  (env-chain-data {'block-time: (h.advanceTime (* 86400 2))})
  (tally-votes 3)
  (expect "should be invalid" "INVALID" (at 'result (get-vote-info 3)))
  (submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "account10")
  (begin-dispute "account0"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (h.blockTime))

  (vote 4 true false "account4")
  (vote 4 false true "account2")
  (vote 4 false true "account1")

  (env-chain-data {'block-time: (h.advanceTime (* 86400 2))})
  (tally-votes 4)
  (expect "should be invalid" "INVALID" (at 'result (get-vote-info 4)))
  (commit-tx)
