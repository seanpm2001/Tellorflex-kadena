(load "../tellorflex-setup.repl" )

;  *******************************************************************
  (print "***************************************************************************************")
  (print "Staked multiple times, disputed but keeps reporting")
  (begin-tx)
  (namespace (read-msg "ns"))
  ;  deposit stake (deposit stake account name, guard, amount)
  (tellorflex.deposit-stake "reporter-1" 
    (describe-keyset (+ (read-msg "ns") ".reporter-1")) 
    (h.precision 30))
    ;  submit value (queryId, value, nonce, queryData, accountName)
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [eth,usd]}")) 
    (base64-encode "100") 
    0 
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter-1")
  (expect "Values reported count for query id should be 1" 1 
    (tellorflex.get-new-value-count-by-query-id 
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))))

  (expect "retrieve-data should return the reported value" 
    (base64-encode "100") 
    (tellorflex.retrieve-data (hash (base64-encode "{SpotPrice: [eth,usd]}")) 
    (h.blockTime)))

  (expect-failure "Trying to remove a value should fail; only governance can do this" 
    (tellorflex.remove-value (hash (base64-encode "{SpotPrice: [eth,usd]}")) (h.blockTime)))
  ;  Mock governance capability
  (test-capability (governance-mock.PRIVATE))
  ;  remove value
  (tellorflex.remove-value (hash (base64-encode "{SpotPrice: [eth,usd]}")) (h.blockTime))
  (expect "Value returned should be empty after value is removed" ""
    (tellorflex.retrieve-data (hash (base64-encode "{SpotPrice: [eth,usd]}")) (h.blockTime)))
  ;  slash-reporter (reporter, recipient)
  ;  Note tokens go to governance account and only governance module is allowed to call this function
  (expect "Slashing reporter should return the stake amount that is transfered to recipient" 
    (h.precision 10) (tellorflex.slash-reporter "reporter-1" "reporter2-keyset"))
  ;  Advance time 4 hrs
  (env-chain-data {'block-time: (h.advanceTime 14400)})
  ;  needed to reset keys in env due to keyset failure appearing
  ;  trying to submit a value should since 12hrs hasn't passed yet
  (expect-failure "Still in reporter lock" 
    (tellorflex.submit-value (hash (base64-encode "{SpotPrice: [eth,usd]}")) 
    (base64-encode "100") 0 (base64-encode "{SpotPrice: [eth,usd]}")  "reporter-1"))
  ;  advance 4 hrs
  (env-chain-data {'block-time: (h.advanceTime 14400)})
  ;  Check staker details
  (expect "Staker should still have money staked" 
    { "guard": (describe-keyset (+ (read-msg "ns") ".reporter-1"))
    , "is-staked": true, "locked-balance": 0
    , "reporter-last-timestamp": (- (h.blockTime) (* 2 14400))
    , "reports-submitted": 1, "reward-debt": 0, "staked-balance": (* 20 (^ 10 18)); 20 because of 10 were slashed
    , "start-date": (- (h.blockTime) (* 2 14400)), "start-vote-count": 0
    , "start-vote-tally": 0 } (tellorflex.get-staker-info "reporter-1"))
  (rollback-tx)
;  *******************************************************************
  (print "***************************************************************************************")
  (print "TBR should not borrow from staking rewards")
  (begin-tx)
  (namespace (read-msg "ns"))
  (use tellorflex)
  ;  Deposit stake amount: 10
  (tellorflex.deposit-stake "reporter-1" 
    (describe-keyset (+ (read-msg "ns") ".reporter-1")) (* 10 (^ 10 18)))
  ;  Add staking rewards 150
  (tellorflex.add-staking-rewards "reporter-1" (h.precision 150))
  (expect "Tellorflex balance should be 160 after staking rewards and reporter's stake deposit" 
    160.0 (f-TRB.get-balance FLEX_ACCOUNT))
  ;  Check reward balance 
  (expect "Staking reward balance should be only 150 and not include reporter's stake" 
    (* 150 (^ 10 18)) (tellorflex.staking-rewards-balance))
  ;  Submit value successfully
  (tellorflex.submit-value 
      (hash (base64-encode "{SpotPrice: [eth,usd]}")) 
      (base64-encode "100") 0 (base64-encode "{SpotPrice: [eth,usd]}")  "reporter-1")
  ;  sanity check tellorflex balance
  (expect "Tellorflex balance should be 160.0" 160.0 (f-TRB.get-balance FLEX_ACCOUNT))
  (rollback-tx)

;  *******************************************************************
  (print "***************************************************************************************")
  (print "Test bad TRB price encoding, 12 hours old")
  (begin-tx)
  (namespace (read-msg "ns"))
  ;  mint extra tokens
  (f-TRB.mint "reporter2-keyset" 
    (describe-keyset (+ (read-msg "ns") ".reporter2-keyset")) 10000.0)
  (tellorflex.deposit-stake "reporter2-keyset" 
    (describe-keyset (+ (read-msg "ns") ".reporter2-keyset")) (h.precision 10000))
  ;  Try update stake amount shouldn't change since no price change
  (tellorflex.update-stake-amount)
  (bind (at 0 (take -1 (env-events true))) 
    {"name" := event, "params" := stake-amount } 
    (expect "Event is NewStakeAmount" 
      (+ (read-msg "ns") ".tellorflex.NewStakeAmount") event)
    (expect "Stake amount should still be 10" [(h.precision 10)] stake-amount))

  (expect "Stake amount should be still be 10" (h.precision 10) (tellorflex.stake-amount))
  ; advance time 1 hour
  (env-chain-data {'block-time: (h.advanceTime 60)})
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) 
    (base64-encode (h.priceConversion 50.0)) 0 
    (base64-encode "{SpotPrice: [trb,usd]}")  "reporter2-keyset")
  ; advance time 1 hour
  (env-chain-data {'block-time: (h.advanceTime 60)})
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) 
    (base64-encode (free.h.priceConversion 75.0)) 0 
    (base64-encode "{SpotPrice: [trb,usd]}")  "reporter2-keyset")
  ; advance time 1 hour
  (env-chain-data {'block-time: (h.advanceTime 60)})
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) 
    (base64-encode (free.h.priceConversion 100.0)) 0 
    (base64-encode "{SpotPrice: [trb,usd]}")  "reporter2-keyset")
  ; advance time 12 hours
  (env-chain-data {'block-time: (h.advanceTime 43200)})
  (tellorflex.update-stake-amount)
  (expect "Stake amount should still be 10" (h.precision 10) (free.tellorflex.stake-amount))
  ; Test bad TRB price encoding, submit a bad value for the staking token price should be int
  ;  submission should pass but later when update stake amount will faill on reading it
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) 
    (base64-encode "Where's the beef?") 0 
    (base64-encode "{SpotPrice: [trb,usd]}")  "reporter2-keyset")
  ; advance time 12 hours
  (env-chain-data {'block-time: (h.advanceTime 43201)})
  (expect-failure "Fails when the value is not a number" (tellorflex.update-stake-amount))
  (expect "Stake amount should be 10 still" (h.precision 10) (tellorflex.stake-amount))
  ; advance time 1 hour
  (env-chain-data {'block-time: (h.advanceTime 60)})
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) 
    (base64-encode (h.priceConversion 350.0)) 0 
    (base64-encode "{SpotPrice: [trb,usd]}")  "reporter2-keyset")
  ; advance time 1 hour
  (env-chain-data {'block-time: (h.advanceTime 60)})
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) 
    (base64-encode (h.priceConversion 400.0)) 0 
    (base64-encode "{SpotPrice: [trb,usd]}")  "reporter2-keyset")
  ; advance time 1 hour
  (env-chain-data {'block-time: (h.advanceTime 60)})
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) 
    (base64-encode (h.priceConversion 450.0)) 0 
    (base64-encode "{SpotPrice: [trb,usd]}")  "reporter2-keyset")
  ; advance time 12 hours
  (env-chain-data {'block-time: (h.advanceTime 43200)})
  ;  Try updating stake amount
  (tellorflex.update-stake-amount)
  (expect "Stake amount should still be 10" (h.precision 10) (tellorflex.stake-amount))
  ;  Submit a very low price for staking token
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) 
    (base64-encode (h.priceConversion 0.01)) 0 
    (base64-encode "{SpotPrice: [trb,usd]}")  "reporter2-keyset")
  ; advance time 12 hours
  (env-chain-data {'block-time: (h.advanceTime 43201)})
  (tellorflex.update-stake-amount)
  (bind (at 0 (take -1 (env-events true))) 
    {"name" := event, "params" := stake-amount } 
    (expect "Event is NewStakeAmount" 
      (+ (read-msg "ns") ".tellorflex.NewStakeAmount") event)
    (expect "Stake amount should increase when price is very low" [(h.precision 50000)] stake-amount))
  (expect "Stake should increase to 50,000" (h.precision 50000) (tellorflex.stake-amount))
  (rollback-tx)
;  *******************************************************************
  (print "***************************************************************************************")
  (print "Staker stakes multiple times")
  (begin-tx)
  (namespace (read-msg "ns"))

  (tellorflex.deposit-stake "reporter-1" 
    (describe-keyset (+ (read-msg "ns") ".reporter-1")) (h.precision 10))
  (tellorflex.deposit-stake "reporter-1" 
    (describe-keyset (+ (read-msg "ns") ".reporter-1")) (h.precision 10))
  (tellorflex.deposit-stake "reporter-1" 
    (describe-keyset (+ (read-msg "ns") ".reporter-1")) (h.precision 10))
  ;  Staker details should checkout 
  (expect "should stil have money staked" 
    { "guard": (describe-keyset (+ (read-msg "ns") ".reporter-1"))
    , "is-staked": true, "locked-balance": 0
    , "reporter-last-timestamp": 0, "reports-submitted": 0
    , "reward-debt": 0, "staked-balance": (h.precision 30)
    , "start-date": (h.blockTime)
    , "start-vote-count": 0
    , "start-vote-tally": 0} (tellorflex.get-staker-info "reporter-1"))
  (rollback-tx)
;  *******************************************************************
  (print "***************************************************************************************")
  (print "Bad value placed, withdraw requested, dispute started")
  (begin-tx)
  (namespace (read-msg "ns"))
  (tellorflex.deposit-stake "reporter-1" 
    (describe-keyset (+ (read-msg "ns") ".reporter-1")) (h.precision 120))
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [eth,usd]}")) 
    (base64-encode (h.priceConversion 4000.0)) 0 
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter-1")
  (tellorflex.request-staking-withdraw "reporter-1" (h.precision 120))
  (test-capability (governance-mock.PRIVATE))
  (tellorflex.remove-value (hash (base64-encode "{SpotPrice: [eth,usd]}")) (h.blockTime))
  (tellorflex.slash-reporter "reporter-1" "reporter2-keyset")
  (expect-failure "7 days didn't pass" (free.tellorflex.withdraw-stake "reporter-1"))
  (rollback-tx)
;  *******************************************************************
  (print "***************************************************************************************")
  (print "TBR should not add from requestWithdraw dispute")
  (begin-tx)
  (namespace (read-msg "ns"))
  (use tellorflex)
  (deposit-stake "reporter-1" 
    (describe-keyset (+ (read-msg "ns") ".reporter-1")) (h.precision 10))
  (deposit-stake "reporter2-keyset" 
    (describe-keyset (+ (read-msg "ns") ".reporter2-keyset")) (h.precision 10))
  (deposit-stake "reporter3-keyset" 
    (describe-keyset (+ (read-msg "ns") ".reporter3-keyset")) (h.precision 10))
  (request-staking-withdraw "reporter-1" (h.precision 10))
  (submit-value 
    (hash (base64-encode "{SpotPrice: [eth,usd]}")) (base64-encode "100") 0 
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter2-keyset")
  (expect "Tellorflex balance should be 30.0" 30.0 (f-TRB.get-balance FLEX_ACCOUNT))
  (test-capability (governance-mock.PRIVATE))
  (remove-value (hash (base64-encode "{SpotPrice: [eth,usd]}")) (h.blockTime))
  (slash-reporter "reporter-1" "reporter2-keyset")
  (commit-tx)
  (begin-tx)
  (namespace (read-msg "ns"))
  (use tellorflex)
  ; advance time 1 day
  (env-chain-data { "block-time": (h.advanceTime 86400)})
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [eth,usd]}")) (base64-encode "100") 0 
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter3-keyset")
  (expect "Tellorflex balance should be 20" 20.0 (f-TRB.get-balance FLEX_ACCOUNT))

  (f-TRB.mint FLEX_ACCOUNT (flex-guard) 10.0)
  (expect "Tellorflex balance should be 30" 30.0 (f-TRB.get-balance FLEX_ACCOUNT))
  ; advance time 1 day
  (env-chain-data {'block-time: (h.advanceTime 86400)})
  (tellorflex.submit-value 
    (hash (base64-encode "{SpotPrice: [eth,usd]}")) (base64-encode "100") 0 
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter3-keyset")
  (expect-that "Tellorflex balance should be less than 30.0" ( > 30.0) (f-TRB.get-balance FLEX_ACCOUNT))
  (commit-tx)
