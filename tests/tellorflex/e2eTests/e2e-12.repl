(load "../tellorflex-setup.repl")
(print "***************************************************************************************")
(print "rewards go to zero, big reward added, staker stakes")
(begin-tx)
(namespace (read-msg "ns"))
(use tellorflex)
(deposit-stake "reporter-1" 
  (describe-keyset "free.reporter-1")
  (h.precision 100) )
(add-staking-rewards "reporter5-keyset" (h.precision 1000))
(env-chain-data {'block-time: (h.advanceTime 1)})
(governance-mock.begin-dispute "user-keyset" "" 0)
(deposit-stake
  "reporter2-keyset"
  (describe-keyset "free.reporter2-keyset")
  (h.precision 100) )

(env-chain-data {'block-time: (h.advanceTime (* 86400 40))})
(request-staking-withdraw
  "reporter-1" (h.precision 100) )

(env-chain-data {'block-time: (h.advanceTime (* 86400 40))})
  (let ((before-balance (f-TRB.get-balance "reporter2-keyset")))
  (tellorflex.request-staking-withdraw "reporter2-keyset" (h.precision 100))
  (expect "staker 2 should have an extra 1000 TRB"
  (+ 1000.0 before-balance) (f-TRB.get-balance "reporter2-keyset")) )

(expect "reward rate should be 0" 0 (tellorflex.reward-rate))
(commit-tx)
(begin-tx)
(namespace (read-msg "ns"))
(use tellorflex)
(add-staking-rewards "reporter5-keyset" (h.precision 3000))
(deposit-stake "reporter3-keyset" (describe-keyset "free.reporter3-keyset") (free.h.precision 100))
(expect "staker 3 should have 0 TRB" 0.0 (f-TRB.get-balance "reporter3-keyset"))
; advance time
(env-chain-data {'block-time: (h.advanceTime (+ 1 (* 86400 10)))})
(deposit-stake "reporter3-keyset" (describe-keyset "free.reporter3-keyset") 0)
(let ((balanceStaker3 (round (h.precision (f-TRB.get-balance "reporter3-keyset"))))
      (expectedBalMin3 (/ (* (h.precision 3000) 9) 30))
      (expectedBalMax3 (/ (* (h.precision 3000) 11) 30)))

    (expect-that "staker 3 should have min TRB" (> balanceStaker3) expectedBalMin3)
    (expect-that "staker 3 should have max TRB" (< balanceStaker3) expectedBalMax3)
)
(commit-tx)
(begin-tx)
(namespace (read-msg "ns"))
(use tellorflex)
; advance time
(env-chain-data {'block-time: (h.advanceTime 86400)})
(deposit-stake "reporter4-keyset" (describe-keyset "free.reporter4-keyset") (h.precision 100))
(expect "staker 4 should have 0 TRB" 0.0 (f-TRB.get-balance "reporter4-keyset"))
(env-chain-data {'block-time: (h.advanceTime (* 86400 50))})
(deposit-stake "reporter3-keyset" (describe-keyset "free.reporter3-keyset") 0)
(commit-tx)
(begin-tx)
(namespace (read-msg "ns"))
(use tellorflex)
(deposit-stake "reporter4-keyset" (describe-keyset "free.reporter4-keyset") 0)
(let* ((balanceStaker3 (round (h.precision (f-TRB.get-balance "reporter3-keyset"))))
      (balanceStaker4 (round (h.precision (f-TRB.get-balance "reporter4-keyset"))))
      (expectedBalMin4 (/ (* (h.precision 3000) 9) 30))
      (expectedBalMax4 (/ (* (h.precision 3000) 11) 30))
      (expectedBalMin3 (* 2 expectedBalMin4))
      (expectedBalMax3 (* 2 expectedBalMax4)))

    (expect-that "staker 4 should have min TRB" (> balanceStaker4) expectedBalMin4)
    (expect-that "staker 4 should have max TRB" (< balanceStaker4) expectedBalMax4)
    (expect-that "staker 3 should have min TRB" (> balanceStaker3) expectedBalMin3)
    (expect-that "staker 3 should have max TRB" (< balanceStaker3) expectedBalMax3)
    (expect "stakers should have 3000 TRB" (round (h.precision 3000.0)) (+ balanceStaker3 balanceStaker4))
)
(expect "reward rate should be 0" 0 (reward-rate))
