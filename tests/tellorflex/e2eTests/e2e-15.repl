(load "../tellorflex-setup.repl")

(env-data {})
(env-sigs [])
(env-data {
  "reporter1-keyset": { "keys": [ "reporter1-public-key" ], "pred": "keys-all" },
  "reporter2-keyset": { "keys": [ "reporter2-public-key" ], "pred": "keys-all" },
  "user-keyset": { "keys": [ "user-public-key" ], "pred": "keys-all" } })
(env-sigs [
  {"key": "reporter1-keyset", "caps": [(coin.TRANSFER "reporter1-keyset" "tellorflex" 100.0)]},
  {"key": "reporter2-keyset", "caps": [(coin.TRANSFER "reporter2-keyset" "tellorflex" 20.0)]},
  {"key": "user-keyset", "caps": [(coin.TRANSFER "user-keyset" "tellorflex" 1000.0)]},
  {"key": "reporter1-public-key", "caps": []},
  {"key": "reporter2-public-key", "caps": []},
  {"key": "user-public-key", "caps": []}])

(begin-tx "two accounts stake (one 10 TRB one 20 TRB), does account2 have double reward debt?")
; check initial conditions
(expect "accumulatedRewardPerShare 0" 0 (free.tellorflex.accumulated-reward-per-share))
(expect "rewardRate 0" 0 (free.tellorflex.reward-rate))
(expect "totalRewardDebt 0" 0 (free.tellorflex.total-reward-debt))
(free.tellorflex.add-staking-rewards "user-keyset" (free.h.precision 1000))
; check conditions after adding rewards
(expect "stakingRewardsBalance 1000" (free.h.precision 1000) (free.tellorflex.staking-rewards-balance))
(expect "totalRewardDebt 0" 0 (free.tellorflex.total-reward-debt))
(let* ((REWARD_RATE_TARGET (fold (*) 60 [60 24 30]))
       (expectedRewardRate (/ (free.h.precision 1000) REWARD_RATE_TARGET)))
       (expect "rewardRate 10" expectedRewardRate (free.tellorflex.reward-rate))
)
; deposit stake
(free.tellorflex.deposit-stake "reporter1-keyset" (describe-keyset "free.reporter1-keyset") (free.h.precision 10))
; deposit stake
(free.tellorflex.deposit-stake "reporter2-keyset" (describe-keyset "free.reporter2-keyset") (free.h.precision 20))
; advance time
(env-chain-data {'block-time: (free.h.advanceTime (* 86400 7))})
; deposit 0 stake, update rewards
(free.tellorflex.deposit-stake "reporter1-keyset" (describe-keyset "free.reporter1-keyset") 0)
(commit-tx)
(begin-tx)
; deposit 0 stake, update rewards
(free.tellorflex.deposit-stake "reporter2-keyset" (describe-keyset "free.reporter2-keyset") 0)
(let ((staker1 (free.tellorflex.get-staker-info "reporter1-keyset"))
      (staker2 (free.tellorflex.get-staker-info "reporter2-keyset")))
    (expect "debt ratio equals 2" 2 (/ (at 'reward-debt staker2) (at 'reward-debt staker1)))
)
