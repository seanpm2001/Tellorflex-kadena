(load "../env-setup.repl")
(namespace (read-msg "ns"))
(use tellorflex)
(env-sigs [
  { "key": "admin-public-key", "caps": []},
  { "key": "reporter-1", "caps": [
    (f-TRB.TRANSFER "reporter-1" FLEX_ACCOUNT 300.0)]},
  { "key": "reporter2-keyset", "caps": [
    (f-TRB.TRANSFER "reporter2-keyset" FLEX_ACCOUNT 10000.0)]},
  { "key": "reporter3-keyset", "caps": [
    (f-TRB.TRANSFER "reporter3-keyset" FLEX_ACCOUNT 300.0)]},
  { "key": "reporter4-keyset", "caps": [
    (f-TRB.TRANSFER "reporter4-keyset" FLEX_ACCOUNT 100.0)]},
  { "key": "reporter5-keyset", "caps": [
    (f-TRB.TRANSFER "reporter5-keyset" FLEX_ACCOUNT 5000.0)]},
  { "key": "user-keyset", "caps": [
    (f-TRB.TRANSFER "user-keyset" FLEX_ACCOUNT 1000.0)]},
  { "key": "reporter1-public-key", "caps": []}, { "key": "reporter2-public-key", "caps": []},
  { "key": "reporter3-public-key", "caps": []}, { "key": "reporter4-public-key", "caps": []},
  { "key": "reporter5-public-key", "caps": []}, { "key": "user-public-key", "caps": []} ])
(begin-tx "set governance for tellorflex test")
(namespace (read-msg "ns"))

;  mock governance for testing
(module governance-mock TELLOR
  (implements i-governance)

  (defcap PRIVATE () true )

  (defcap TELLOR ()
    (enforce-guard (keyset-ref-guard (+ (read-msg "ns") ".admin-keyset")))
  )

  (defun register-gov-guard:guard ()
      (with-capability (TELLOR) (create-capability-guard (PRIVATE)))
  )

  (defschema global-schema
    vote-count:integer)

  (defschema vote-tally-by-address
    vote-tally-by-address:integer)

  (defschema vote-schema
    voters:[string])

  (deftable vote-table:{vote-schema})
  (deftable vote-tally:{vote-tally-by-address})
  (deftable global:{global-schema})

  (defun constructor ()
    (insert global 'global { 'vote-count: 0})
  )
  (defun begin-dispute:string (account:string query-id:string timestamp:integer)
    (with-read global 'global { 'vote-count := vote-count}
    (update global 'global { 'vote-count: (+ 1 vote-count)}))
  )
  (defun vote (dispute-id:integer supports:bool invalid-query:bool voter-account:string)
    (let ((vote-count (at "vote-count" (read global "global"))))
      (enforce (and (<= dispute-id vote-count) (> dispute-id 0)) "Vote doesn't exist"))
    (with-default-read vote-table (int-to-str 10 dispute-id)
      { 'voters : [] }{ 'voters := voters }
    (enforce (not (contains voter-account voters)) "Voter has already voted")
    (with-default-read vote-tally voter-account
      { 'vote-tally-by-address: 0 }{ 'vote-tally-by-address := vote-tally-by-address }
      (write vote-tally voter-account { 'vote-tally-by-address: (+ vote-tally-by-address 1)}))

      (write vote-table (int-to-str 10 dispute-id) { 'voters: (+ voters [voter-account])}))
    )
  (defun get-vote-tally-by-address:integer (voter:string)
    (try 0 (at 'vote-tally-by-address (read vote-tally voter))))
  (defun get-vote-count:integer ()
    (at "vote-count" (read global "global")))
)

(create-table governance-mock.global)
(create-table governance-mock.vote-table)
(create-table governance-mock.vote-tally)

(governance-mock.constructor)
; Check governance address not initialized in tellorflex
(expect-failure "row not found" (tellorflex.get-governance-module))
; Input governance address in tellorflex
(tellorflex.init governance-mock)
; Expect failure when trying to input governance address again
(expect-failure "row found for key" (tellorflex.init "governance place holder"))
(commit-tx)
